#include <iostream>
#include <vector>
#include <algorithm>

const int MAX_N = 30005;

int parent[MAX_N];
int groupSize[MAX_N];

// Function to find the root of a friend group
int findRoot(int x) {
    if (parent[x] == x) {
        return x;
    }
    return parent[x] = findRoot(parent[x]);
}

// Function to union two friend groups
void unionGroups(int a, int b) {
    int rootA = findRoot(a);
    int rootB = findRoot(b);
    if (rootA != rootB) {
        if (groupSize[rootA] < groupSize[rootB]) {
            std::swap(rootA, rootB);
        }
        parent[rootB] = rootA;
        groupSize[rootA] += groupSize[rootB];
    }
}

int main() {
    int N, M;
    while (true) {
        std::cin >> N >> M;
        if (N == 0 && M == 0) {
            break;
        }

        for (int i = 1; i <= N; ++i) {
            parent[i] = i;
            groupSize[i] = 1;
        }

        for (int i = 0; i < M; ++i) {
            int A, B;
            std::cin >> A >> B;
            unionGroups(A, B);
        }

        int maxGroupSize = 0;
        for (int i = 1; i <= N; ++i) {
            if (parent[i] == i) {
                maxGroupSize = std::max(maxGroupSize, groupSize[i]);
            }
        }

        std::cout << maxGroupSize << std::endl;
    }

    return 0;
}
