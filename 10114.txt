#include <iostream>
#include <vector>

using namespace std;

// Function to check if it's possible to partition the set into two subsets with equal sums
bool canPartition(vector<int>& nums) {
    int totalSum = 0;
    int n = nums.size();

    for (int i = 0; i < n; i++) {
        totalSum += nums[i];
    }

    if (totalSum % 2 != 0) {
        return false;  // If the total sum is odd, it cannot be partitioned into two equal subsets
    }

    int target = totalSum / 2;
    vector<vector<bool> > dp(n + 1, vector<bool>(target + 1, false));

    for (int i = 0; i <= n; i++) {
        dp[i][0] = true;
    }

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= target; j++) {
            if (j < nums[i - 1]) {
                dp[i][j] = dp[i - 1][j];
            } else {
                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]];
            }
        }
    }

    return dp[n][target];
}

int main() {
    int T;
    cin >> T;

    while (T--) {
        int N;
        cin >> N;

        vector<int> nums(N);
        for (int i = 0; i < N; i++) {
            cin >> nums[i];
        }

        if (canPartition(nums)) {
            cout << "YES" << endl;
        } else {
            cout << "NO" << endl;
        }
    }

    return 0;
}
