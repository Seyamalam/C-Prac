#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

const int MAX = 105;
vector<int> adj[MAX];
int dist[MAX];

int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

void bfs(int src) {
    memset(dist, -1, sizeof(dist));
    queue<int> q;
    dist[src] = 0;
    q.push(src);

    while (!q.empty()) {
        int u = q.front();
        q.pop();

        for (int i = 0; i < adj[u].size(); i++) {
            int v = adj[u][i];
            if (dist[v] == -1) {
                dist[v] = dist[u] + 1;
                q.push(v);
            }
        }
    }
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int N;
        cin >> N;

        vector<int> pass(N+1);
        for (int i = 1; i <= N; i++) {
            cin >> pass[i];
            adj[i].clear();
        }

        for (int i = 1; i <= N; i++) {
            for (int j = i+1; j <= N; j++) {
                if (gcd(pass[i], pass[j]) > 1) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }

        int M;
        cin >> M;
        while (M--) {
            int P, Q;
            cin >> P >> Q;

            bfs(P);

            if (dist[Q] != -1)
                cout << dist[Q] << endl;
            else
                cout << "Impossible" << endl;
        }
    }

    return 0;
}
